-- -------------------------------------------------------------------------
-- PostgreSQL SQL create tables
-- exported at Mon Sep 16 12:10:38 BOT 2024 with easyDesigner
-- -------------------------------------------------------------------------

-- -------------------------------------------------------------------------
-- Table: user_n
-- -------------------------------------------------------------------------
CREATE DATABASE mi_base_datos;
\c mi_base_datos;  -- Conectar a la base de datos reci√©n c  reada
----------------------------------------------------------------------------
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.acta
(
    plan_grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    plan_grupo_id_docente integer NOT NULL,
    id_acta bigint NOT NULL DEFAULT nextval('acta_id_acta_seq'::regclass),
    fecha date,
    descripcion character varying COLLATE pg_catalog."default",
    CONSTRAINT acta_pkey PRIMARY KEY (plan_grupo_nombre, plan_grupo_id_docente, id_acta)
);

CREATE TABLE IF NOT EXISTS public.docente
(
    id_usuario integer NOT NULL,
    grupo_materia integer,
    CONSTRAINT docente_pkey PRIMARY KEY (id_usuario)
);

CREATE TABLE IF NOT EXISTS public.estudiante
(
    id_usuario integer NOT NULL,
    cod_sis integer NOT NULL,
    carrera integer,
    CONSTRAINT estudiante_pkey PRIMARY KEY (id_usuario)
);

CREATE TABLE IF NOT EXISTS public.evaluacion
(
    plan_grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    plan_grupo_id_docente integer NOT NULL,
    tipo_evaluacion integer NOT NULL,
    calificacion integer NOT NULL,
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT evaluacion_pkey PRIMARY KEY (plan_grupo_nombre, plan_grupo_id_docente)
);

CREATE TABLE IF NOT EXISTS public.evaluacion_cruzada
(
    evaluacion_plan_grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    evaluacion_plan_grupo_id_docente integer NOT NULL,
    grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    grupo_id_docente integer NOT NULL,
    CONSTRAINT evaluacion_cruzada_pkey PRIMARY KEY (evaluacion_plan_grupo_nombre, evaluacion_plan_grupo_id_docente)
);

CREATE TABLE IF NOT EXISTS public.evaluacion_pares
(
    evaluacion_plan_grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    evaluacion_plan_grupo_id_docente integer NOT NULL,
    id_estudiante integer NOT NULL,
    evaluado integer NOT NULL,
    CONSTRAINT evaluacion_pares_pkey PRIMARY KEY (evaluacion_plan_grupo_nombre, evaluacion_plan_grupo_id_docente, id_estudiante, evaluado)
);

CREATE TABLE IF NOT EXISTS public.evaluacion_pro
(
    id_eva integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tipo_eva character varying(20) COLLATE pg_catalog."default" NOT NULL,
    descripcion_eva text COLLATE pg_catalog."default" NOT NULL,
    fecha_ini date NOT NULL,
    fecha_fin date NOT NULL
);

CREATE TABLE IF NOT EXISTS public.grupo
(
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    id_docente integer NOT NULL,
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT grupo_pkey PRIMARY KEY (nombre, id_docente)
);

CREATE TABLE IF NOT EXISTS public.grupo_estudiante
(
    id_estudiante integer NOT NULL,
    grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    grupo_id_docente integer NOT NULL,
    rol integer NOT NULL,
    CONSTRAINT grupo_estudiante_pkey PRIMARY KEY (id_estudiante, grupo_nombre, grupo_id_docente)
);

CREATE TABLE IF NOT EXISTS public.plan
(
    grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    grupo_id_docente integer NOT NULL,
    objetivo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    fecha_ini date,
    fecha_fin date,
    CONSTRAINT plan_pkey PRIMARY KEY (grupo_nombre, grupo_id_docente)
);

CREATE TABLE IF NOT EXISTS public.sprint
(
    id integer NOT NULL DEFAULT nextval('sprint_id_seq'::regclass),
    grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    grupo_id_docente integer NOT NULL,
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    CONSTRAINT sprint_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tarea
(
    plan_grupo_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    plan_grupo_id_docente integer NOT NULL,
    id_estudiante integer NOT NULL,
    id_tarea bigint NOT NULL DEFAULT nextval('tarea_id_tarea_seq'::regclass),
    detalle character varying COLLATE pg_catalog."default" NOT NULL,
    archivo bytea,
    path character varying COLLATE pg_catalog."default",
    CONSTRAINT tarea_pkey PRIMARY KEY (plan_grupo_nombre, plan_grupo_id_docente, id_estudiante)
);

CREATE TABLE IF NOT EXISTS public.tipo_plan
(
    id_plan bigint NOT NULL DEFAULT nextval('tipo_plan_id_plan_seq'::regclass),
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    detalle character varying COLLATE pg_catalog."default" NOT NULL,
    requerimiento integer,
    CONSTRAINT tipo_plan_pkey PRIMARY KEY (id_plan)
);

CREATE TABLE IF NOT EXISTS public.user_n
(
    id_usuario bigint NOT NULL DEFAULT nextval('user_n_id_usuario_seq'::regclass),
    username character varying COLLATE pg_catalog."default",
    nombres character varying COLLATE pg_catalog."default" NOT NULL,
    apellidos character varying COLLATE pg_catalog."default" NOT NULL,
    clave character varying COLLATE pg_catalog."default" NOT NULL,
    tipo integer NOT NULL,
    correo character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_n_pkey PRIMARY KEY (id_usuario)
);

ALTER TABLE IF EXISTS public.acta
    ADD CONSTRAINT acta_plan_grupo_nombre_plan_grupo_id_docente_fkey FOREIGN KEY (plan_grupo_nombre, plan_grupo_id_docente)
    REFERENCES public.plan (grupo_nombre, grupo_id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.docente
    ADD CONSTRAINT docente_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.user_n (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS docente_pkey
    ON public.docente(id_usuario);


ALTER TABLE IF EXISTS public.estudiante
    ADD CONSTRAINT estudiante_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.user_n (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS estudiante_pkey
    ON public.estudiante(id_usuario);


ALTER TABLE IF EXISTS public.evaluacion
    ADD CONSTRAINT evaluacion_plan_grupo_nombre_plan_grupo_id_docente_fkey FOREIGN KEY (plan_grupo_nombre, plan_grupo_id_docente)
    REFERENCES public.plan (grupo_nombre, grupo_id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS evaluacion_pkey
    ON public.evaluacion(plan_grupo_nombre, plan_grupo_id_docente);


ALTER TABLE IF EXISTS public.evaluacion_cruzada
    ADD CONSTRAINT evaluacion_cruzada_evaluacion_plan_grupo_nombre_evaluacion_fkey FOREIGN KEY (evaluacion_plan_grupo_nombre, evaluacion_plan_grupo_id_docente)
    REFERENCES public.evaluacion (plan_grupo_nombre, plan_grupo_id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS evaluacion_cruzada_pkey
    ON public.evaluacion_cruzada(evaluacion_plan_grupo_nombre, evaluacion_plan_grupo_id_docente);


ALTER TABLE IF EXISTS public.evaluacion_cruzada
    ADD CONSTRAINT evaluacion_cruzada_grupo_nombre_grupo_id_docente_fkey FOREIGN KEY (grupo_nombre, grupo_id_docente)
    REFERENCES public.grupo (nombre, id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.evaluacion_pares
    ADD CONSTRAINT evaluacion_pares_evaluacion_plan_grupo_nombre_evaluacion_p_fkey FOREIGN KEY (evaluacion_plan_grupo_nombre, evaluacion_plan_grupo_id_docente)
    REFERENCES public.evaluacion (plan_grupo_nombre, plan_grupo_id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.evaluacion_pares
    ADD CONSTRAINT evaluacion_pares_evaluado_fkey FOREIGN KEY (evaluado)
    REFERENCES public.estudiante (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.evaluacion_pares
    ADD CONSTRAINT evaluacion_pares_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiante (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.grupo
    ADD CONSTRAINT grupo_id_docente_fkey FOREIGN KEY (id_docente)
    REFERENCES public.docente (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.grupo_estudiante
    ADD CONSTRAINT grupo_estudiante_grupo_nombre_grupo_id_docente_fkey FOREIGN KEY (grupo_nombre, grupo_id_docente)
    REFERENCES public.grupo (nombre, id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.grupo_estudiante
    ADD CONSTRAINT grupo_estudiante_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiante (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.plan
    ADD CONSTRAINT plan_grupo_nombre_grupo_id_docente_fkey FOREIGN KEY (grupo_nombre, grupo_id_docente)
    REFERENCES public.grupo (nombre, id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS plan_pkey
    ON public.plan(grupo_nombre, grupo_id_docente);


ALTER TABLE IF EXISTS public.sprint
    ADD CONSTRAINT sprint_grupo_nombre_grupo_id_docente_fkey FOREIGN KEY (grupo_nombre, grupo_id_docente)
    REFERENCES public.grupo (nombre, id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tarea
    ADD CONSTRAINT tarea_id_estudiante_fkey FOREIGN KEY (id_estudiante)
    REFERENCES public.estudiante (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tarea
    ADD CONSTRAINT tarea_plan_grupo_nombre_plan_grupo_id_docente_fkey FOREIGN KEY (plan_grupo_nombre, plan_grupo_id_docente)
    REFERENCES public.plan (grupo_nombre, grupo_id_docente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;